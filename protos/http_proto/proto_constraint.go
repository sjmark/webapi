package http_proto

// Code generated by tool/zgen
// DO NOT EDIT!

// client protocol interface defines
type Protocol interface {
	CommandName() string
}

type RequestMaker func() Request
type ResponseMaker func() Response

type Request interface {
	Protocol
	GetReqCommon() ReqCommon
	SetReqCommon(ReqCommon)
}

type Response interface {
	Protocol
}

// client protocol request getter
func NewRequest(cmdName string) (Request, bool) {
	maker, ok := requestMap[cmdName]
	if !ok {
		return nil, false
	}
	return maker(), true
}

// client protocol response getter  目前没有用占无需写
func NewResponse(cmdName string) (Response, bool) {
	maker, ok := responseMap[cmdName]
	if !ok {
		return nil, false
	}
	return maker(), true
}

// type constant
const (
	CommonType = "Common"
	LoginType  = "Login"
	UserUpType = "UserUp"
)

// client protocol request maker map
var requestMap = map[string]RequestMaker{
	LoginType:  func() Request { return new(LoginReq) },
	UserUpType: func() Request { return new(UserUpInfoReq) },
}

// client protocol response maker map 目前没有用占无需写
var responseMap = map[string]ResponseMaker{
	LoginType:  func() Response { return new(LoginRes) },
	UserUpType: func() Response { return new(CommonRes) },
}

// client protocol object functions
func (p LoginReq) GetReqCommon() ReqCommon   { return ReqCommon{}}
func (p *LoginReq) SetReqCommon(c ReqCommon) {}
func (p LoginReq) CommandName() string       { return LoginType }

func (p UserUpInfoReq) GetReqCommon() ReqCommon { return p.ReqCommon }
func (p *UserUpInfoReq) SetReqCommon(c ReqCommon) {p.ReqCommon = c}
func (p UserUpInfoReq) CommandName() string { return UserUpType }

func (p LoginRes) CommandName() string  { return LoginType }
func (p CommonRes) CommandName() string { return CommonType }

// more 。。。
